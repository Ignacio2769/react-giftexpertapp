{"version":3,"sources":["Componentes/AddCategory.js","helpers/getGifs.js","Componentes/GifGridItem.js","Componentes/GifGrid.js","hooks/useFetchGifs.js","Componentes/GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categorias","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","gif","id","title","images","downsized_medium","GifGridItem","img","className","src","alt","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","image","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"iNAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,uBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAKlB,UACI,+CAAkBD,KAClB,uBACIQ,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,c,uBCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEDI,MAAMF,GAFL,cAEbG,EAFa,gBAGIA,EAAIC,OAHR,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATtB,kBAaZM,GAbY,4CAAH,sDCCPO,EAAc,SAAC,GAAW,IAAVC,EAAS,EAATA,IACzB,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAId,IAAKiB,IAAKH,EAAIJ,QAC5B,4BAAII,EAAIJ,YCFPQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAEtB,ECHwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WACNzB,EAAQC,GACHyB,MAAK,SAAAZ,GACFa,YAAW,WACPH,EAAS,CACLhB,KAAMM,EACNQ,SAAS,MAEd,UAEZ,CAACrB,IAEGsB,EDf2BK,CAAa3B,GAAjCa,EAAd,EAAQN,KAAcc,EAAtB,EAAsBA,QAEtB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDjB,IAClDqB,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SAEQJ,EAAOJ,KAAI,SAACmB,GACR,OAAO,cAAC,EAAD,CAEHZ,IAAKY,GADAA,EAAMjB,aEsBxBkB,EA/BM,WAEjB,MAAoC3C,mBAAS,CAAC,gBAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAMA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAEQS,EAAWe,KAAI,SAAAT,GAEX,OAAO,cAAC,EAAD,CAEHA,SAAUA,GADLA,YCtBjC8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.d4d5b9bd.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategorias }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (inputValue.trim().length > 2) {\r\n            setCategorias(categorias => [inputValue, ...categorias])\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h3>Valor input: {inputValue}</h3>\r\n            <input\r\n                type='text'\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategorias: PropTypes.func.isRequired\r\n}","\r\nexport const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=altIWPjL4PxgnQwJ2VdWunuk7784S7Ih`\r\n    const res = await fetch(url)\r\n    const { data } = await res.json()\r\n\r\n    const gifs = data.map(gif => {\r\n        return {\r\n            id: gif.id,\r\n            title: gif.title,\r\n            url: gif.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({img}) => {\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={img.url} alt={img.title} />\r\n            <p>{img.title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(category)\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n            {loading && <p>Loading</p>}\r\n            <div className='card-grid'>\r\n                {\r\n                    images.map((image) => {\r\n                        return <GifGridItem\r\n                            key={image.id}\r\n                            img={image}\r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(images => {\r\n                setTimeout(() => {\r\n                    setState({\r\n                        data: images,\r\n                        loading: false\r\n                    })\r\n                }, 500);\r\n            })\r\n    }, [category])\r\n\r\n    return state\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './AddCategory';\r\nimport PropTypes from 'prop-types'\r\nimport { GifGrid } from './GifGrid';\r\n\r\n//rafc para crear le componente automaticamente\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categorias, setCategorias] = useState(['Dragon Ball'])\r\n\r\n    const handleAdd = () => {\r\n        // setCategorias([...categorias, categoria])\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategorias={setCategorias} />\r\n            <hr></hr>\r\n\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n            <ol>\r\n                {\r\n                    categorias.map(category => {\r\n                        // return <li key={category}>{category}</li>\r\n                        return <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    })\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GifExpertApp from './Componentes/GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}